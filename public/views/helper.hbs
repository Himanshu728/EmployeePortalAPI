<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee Portal</title>
    <link rel="stylesheet" href="../statics/buttonStyle.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
</head>

<body>
    {{>navbar}}
    <div class="container" style="margin-top: 2.5%;">
        <input type="file" onchange="onImageChange(event)" />
        <button class="btn btn-sm btn-primary" onclick="callHelper()">Text To Image</button>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz"
        crossorigin="anonymous"></script>

    <script>
        var fileContent;
        function onImageChange(event) {
            const imageFile = URL.createObjectURL(event.target.files[0]);
            createImage(imageFile, convertImage);
        }

        function createImage(imageFile, callback) {
            const image = document.createElement('img');
            image.onload = () => callback(image);
            image.setAttribute('src', imageFile);
        }

        function convertImage(image) {
            const canvas = drawImageToCanvas(image);
            const ctx = canvas.getContext('2d');

            let result = [];
            for (let y = 0; y < canvas.height; y++) {
                result.push([]);
                for (let x = 0; x < canvas.width; x++) {
                    let data = ctx.getImageData(x, y, 1, 1).data;
                    result[y].push(data[0]);
                    result[y].push(data[1]);
                    result[y].push(data[2]);
                }
            }

            const arrayCode = convertArray(result);
            fileContent = arrayCode;
        }

        function drawImageToCanvas(image) {
            const canvas = document.createElement('canvas');
            canvas.width = image.width;
            canvas.height = image.height;
            canvas.getContext('2d').drawImage(image, 0, 0, image.width, image.height);
            return canvas;
        }

        function convertArray(array) {
            return JSON.stringify(array).replace(/\[/g, '{').replace(/\]/g, '}');
        }

        function callHelper() {
            //var formData = new FormData();
            //formData.append('file', document.getElementById('fileINP').files[0]);
            var data = {
                fileContent: fileContent
            };
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.status == 200) {
                    console.log(JSON.stringify(this.responseText));
                }
            }
            xhttp.open('POST', 'https://prod-174.westus.logic.azure.com:443/workflows/63ae0410cab742e8bc99dd8792430893/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=IXEF7saH2-QreAHB-idTB6eYIPwWYFIFXu2h2p0mlP0', true);
            xhttp.send(JSON.stringify(data));
        }
    </script>
</body>

</html>